<?xml version="1.0" encoding="UTF-8"?>

<!--
    status : 指定log4j本身的打印日志的级别.ALL< TRACE < DEBUG < INFO < WARN < ERROR < FATAL < OFF
    monitorInterval : 用于指定log4j自动重新配置的监测间隔时间，单位是s,最小是5s.
-->
<configuration status="debug" monitorInterval="30">

    <!-- Property定义 -->
    <Properties>
        <Property name="debugLogName">debug.log</Property>
        <Property name="errorLogName">error.log</Property>
        <Property name="debugLogPath">E:/IdeaProjects/StrutsSpringMybatis/src/main/webapp/log/debug/</Property>
        <Property name="errorLogPath">E:/IdeaProjects/StrutsSpringMybatis/src/main/webapp/log/error/</Property>
        <Property name="logPath">E:/IdeaProjects/StrutsSpringMybatis/src/main/webapp/log/</Property>
        <property name="logPattern">[%p] %d{yyyy-MM-dd HH\:mm\:ss} method:%l%n%m%n</property>
    </Properties>

    <!-- appender 定义 -->
    <appenders>
        <!--控制台输出配置-->
        <Console name="Console" target="SYSTEM_OUT">
            <!-- 控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) -->
            <ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY" />
            <!-- 日志输出格式 -->
            <PatternLayout pattern="${logPattern}" />
        </Console>

        <!-- 输出到文件 -->
        <!-- append 为 true 表示消息增加到指定文件中，false 表示消息覆盖指定的文件内容，默认值是 true -->
        <!--<File name="logFile" fileName="${logPath}logfile.log" append="false">
            <PatternLayout pattern="${logPattern}" />
        </File>-->

        <!--
            日志输出
            fileName：输出文件
            filePattern：压缩文件,此处表示按年份-月份建立
        -->
        <RollingFile name="DebugRollingFile" fileName="${debugLogPath}${debugLogName}"
                     filePattern="${logPath}$${date:yyyy-MM}/SSM-%d{yyyyMMddHHmmssSSS}-%i.log.gz">
            <!--
                输出日志级别
                只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY" />
            <!-- 输出格式 -->
            <PatternLayout pattern="${logPattern}" />

            <!-- 最多保留文件数 -->
            <DefaultRolloverStrategy max="20" />

            <Policies>
                <!--
                    基于时间的滚动策略,控制日志文件大小
                        关键点在于RollingFile中filePattern属性后的日期格式，以及TimeBasedTriggeringPolicy中interval
                        的滚动周期
                        日期格式精确到哪一位，interval也精确到哪一个单位
                -->
                <!--
                    interval:指定多久滚动一次，默认是 1 小时
                    modulate = true 用来调整时间.
                        比如现在是早上3am，interval是4，那么第一次滚动是在4am，接着是8am，12am...而不是7am.
                -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true" />
                <!--
                    基于指定文件大小的滚动策略，size属性用来定义每个日志文件的大小
                        日志大小超过size，则该日志会自动存入定义（filePattern参数）的文件夹下面并进行压缩，作为存档
                -->
                <SizeBasedTriggeringPolicy size="20MB" />
            </Policies>
        </RollingFile>

        <RollingFile name="ErrorRollingFile" fileName="${errorLogPath}${errorLogName}"
                     filePattern="${logPath}$${date:yyyy-MM}/SSM-%d{yyyyMMddHHmmssSSS}-%i.log.gz">
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY" />
            <PatternLayout pattern="${logPattern}" />
            <DefaultRolloverStrategy max="20" />
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true" />
                <SizeBasedTriggeringPolicy size="20MB" />
            </Policies>
        </RollingFile>

    </appenders>

    <!--
        loggers定义
            只有定义了logger并引入的appender，appender才会生效
    -->
    <loggers>
        <!--过滤掉spring和mybatis的一些无用的信息-->
        <logger name="org.springframework" level="info"></logger>
        <logger name="org.mybatis" level="info"></logger>
        <!-- 配置日志的根节点 -->
        <Root level="debug">
            <AppenderRef ref="Console" />
            <AppenderRef ref="DebugRollingFile" />
            <AppenderRef ref="ErrorRollingFile" />
        </Root>
    </loggers>


</configuration>